server {
    listen 80;
    listen [::]:80;
    server_name prelevels.com www.prelevels.com 89.117.36.213;

    return 301 https://www.prelevels.com$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name prelevels.com;

    ssl_certificate /etc/letsencrypt/live/prelevels.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/prelevels.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    return 301 https://www.prelevels.com$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name www.prelevels.com;

    ssl_certificate /etc/letsencrypt/live/prelevels.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/prelevels.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    location = /favicon.ico { access_log off; log_not_found off; }

    location /static/ {
        alias /var/www/prelevels/server/static/;
    }

    location /uploads/ {
        alias /var/www/prelevels/server/uploads/;
    }

    location /admin/ {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }

    location /api/ {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;

        # Dynamically allow both domains
        if ($http_origin ~* (https://(www\.)?prelevels\.com)) {
            add_header Access-Control-Allow-Origin $http_origin;
        }
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-CSRFToken";
        add_header Access-Control-Allow-Credentials "true";

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

    # Next.js Configuration
    location /backend/api/ {
        proxy_pass http://127.0.0.1:3000/backend/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}